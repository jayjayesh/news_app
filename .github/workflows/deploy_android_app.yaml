name: Build and Deploy Android App

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  androidAPK:
    name: Build CI (Android)
    runs-on: ubuntu-latest

    # env:
    #   ANDROID_FIREBASE_APP_ID: ${{ secrets.ANDROID_FIREBASE_APP_ID }}
    #   IOS_FIREBASE_APP_ID: ${{ secrets.IOS_FIREBASE_APP_ID }}
    #   FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.22.0'  # Use the latest stable version or specify the version you need
        channel: 'stable'
        cache: true

    - name: Install dependencies
      run: flutter pub get

    # - name: Run build_runner (command)
    #   run: flutter pub run build_runner build --delete-conflicting-outputs

    - name: Build APK
      run: flutter build apk --release

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-release-apk
        path: build/app/outputs/flutter-apk/app-release.apk
  
    - name: Create Release Save Build at Github
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: build/app/outputs/flutter-apk/app-release.apk
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  # release:
  #   name: Release APK
  #   needs: androidAPK
  #   if: startsWith(github.ref, 'refs/tags/')
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Download APK from build
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: apk
  #     - name: Display structure of downloaded files
  #       run: ls -R

  #     - name: Create Release
  #       id: create_release
  #       uses: actions/create-release@v1.1.4
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: ${{ github.ref }}
  #         release_name: ${{ github.ref }}
  #     - name: Upload Release APK
  #       id: upload_release_asset
  #       uses: actions/upload-release-asset@v1.0.1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
  #         asset_path: ./app-release.apk
  #         asset_name: app-release.apk
  #         asset_content_type: application/zip


    # - name: Upload APK to Firebase App Distribution
    #   run: |
    #     wget https://dl.google.com/firebase/appdistribution/appdistribution-cli/latest/linux/firebase-appdistribution-cli-linux.zip
    #     unzip firebase-appdistribution-cli-linux.zip
    #     ./firebase-appdistribution --app $ANDROID_FIREBASE_APP_ID --release-notes "New release from GitHub Actions" --token $FIREBASE_TOKEN app/build/outputs/flutter-apk/app-release.apk

    # - name: Upload IPA to Firebase App Distribution
    #   run: |
    #     wget https://dl.google.com/firebase/appdistribution/appdistribution-cli/latest/linux/firebase-appdistribution-cli-linux.zip
    #     unzip firebase-appdistribution-cli-linux.zip
    #     ./firebase-appdistribution --app $IOS_FIREBASE_APP_ID --release-notes "New release from GitHub Actions" --token $FIREBASE_TOKEN build/ios/iphoneos/Runner.app
